/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/led/led.h>

#define BT0 BT_SEL 0
#define BT1 BT_SEL 1
#define BT2 BT_SEL 2
#define BT3 BT_SEL 3
#define BT4 BT_SEL 4


&spi1 {
	compatible = "nordic,nrf-spim";
	status = "okay";
	mosi-pin = <6>;
	// Unused pins, needed for SPI definition, but not used by the ws2812 driver itself.
	sck-pin = <5>;
	miso-pin = <7>;

	led_strip: ws2812@0 {
		compatible = "worldsemi,ws2812-spi";
		label = "WS2812";

		/* SPI */
		reg = <0>; /* ignored, but necessary for SPI bindings */
		spi-max-frequency = <4000000>;

		/* WS2812 */
		chain-length = <37>; /* arbitrary; change at will */
		spi-one-frame = <0x70>;
		spi-zero-frame = <0x40>;
		color-mapping = <LED_COLOR_ID_GREEN LED_COLOR_ID_RED LED_COLOR_ID_BLUE>;
	};
};

/ {
	chosen {
		zmk,underglow = &led_strip;
	};
};

/ {
    combos {
         compatible = "zmk,combos";

         // after https://github.com/bcat/zmk-config/commit/0f0b57ff233a56345426d3139d3d26906ecd7f18
         combo_unlock {
           timeout-ms = <2000>;
           key-positions = <0 11 24 35>;
           bindings = <&tog 4>;
         };
     };     
     
     behaviors {
        td0: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_0";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp RSHFT>, <&caps_word>;
        };
    };

        keymap {
                compatible = "zmk,keymap";

                default_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |  Q  |  W  |  E  |  R  |    T     |   |  Y  |  U   |  I  |  O  |  P  | BKSP      |
// |  TG1 |  A  |  S  |  D  |  F  |    G     |   |  H  |  J   |  K  |  L  |  ;  |  '        |
// | SHFT |  Z  |  X  |  C  |  V  |    B     |   |  N  |  M   |  ,  |  .  |  /  | SHFT/CAPW |
//                    | ALT | CMD | CTL(ENT) |   | SPC | FN2  | FN1 |
                        bindings = <
   &kp TAB     &kp Q    &kp W    &kp E       &kp R       &kp T          &kp Y       &kp U    &kp I       &kp O    &kp P    &kp BSPC
   &tog 1      &kp A    &kp S    &kp D       &kp F       &kp G          &kp H       &kp J    &kp K       &kp L    &kp SEMI &kp SQT
   &kp LSHFT   &kp Z    &kp X    &kp C       &kp V       &kp B          &kp N       &kp M    &kp COMMA   &kp DOT  &kp FSLH &td0
                                 &kp LALT    &kp LGUI    &mt LCTRL RET  &kp SPACE   &mo 2    &mo 1
                        >;
                };
                num_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |  1  |  2  |  3  |  4  |    5     |   |  6  |  7  |  8   |   9  |   0   | BKSP      |
// |  TG1 |  4  |  5  |  6  |  `  |    -     |   |     |     |      |  UP  |   \   |   `       |
// | SHFT |  7  |  8  |  9  |  0  |    =     |   |     |     | LEFT | DOWN | RIGHT | SHFT/CAPW |
//                    | ALT | CMD | CTL(ENT) |   | SPC | FN3 |  FN1 |
                        bindings = <
   &trans   &kp N1   &kp N2   &kp N3   &kp N4      &kp N5         &kp N6   &kp N7   &kp N8      &kp N9      &kp N0      &kp BSPC
   &tog 1   &kp N4   &kp N5   &kp N6   &kp SEMI    &kp MINUS      &none    &none    &none       &kp UP      &kp BSLH    &kp GRAVE
   &trans   &kp N7   &kp N8   &kp N9   &kp N0      &kp EQUAL      &none    &none    &kp LEFT    &kp DOWN    &kp RIGHT   &trans
                              &trans   &trans      &mt LCTRL RET  &trans   &mo 3   &trans
                        >;
                };

                func_layer {
// -----------------------------------------------------------------------------------------
// | ESC    | PRVS | RWND | PLAY  | MFFD    | NEXT    |   |  F1   |  F2   |  F3   | ( | ) | DEL    |
// |        |      |      |       |         | VOL+    |   |  F4   |  F5   |  F6   | [ | ] |        | 
// |        |      |      |       |         | VOL-    |   |  F7   |  F8   |  F9   | { | } | CAPS   |
//                        | HYPER | MEH     | MYKEYB  |   | SPACE | FN2   | FN1   |
                        bindings = <
   &kp ESC  &kp C_PREV  &kp C_RW   &kp C_PP   &kp C_FF    &kp C_NEXT     &kp F1   &kp F2   &kp F3   &kp LPAR    &kp RPAR    &kp DEL
   &none    &none       &none      &none      &none       &kp C_VOL_UP   &kp F4   &kp F5   &kp F6   &kp LBKT    &kp RBKT    &none
   &none    &none       &none      &none      &none       &kp C_VOL_DN   &kp F7   &kp F8   &kp F9   &kp LBRC    &kp RBRC    &kp CAPS
			&kp LS(LC(LA(LGUI)))  &kp LC(LS(LALT))  &kp C_AL_KEYBOARD_LAYOUT   &trans  &trans &mo 3
                        >;
                };
		
		board_layer {
// -----------------------------------------------------------------------------------------
// | BT_CLR  | BT1   | BT2   | BT3   | BT4   | BT5     |   |         |       |       |       |       |        |
// | RGB_TOG | BRI + | HUE + | SAT + | EFF + | OUT_TOG |   |         |       |       |       |       |        |
// |         | BRI - | HUE - | SAT - | EFF - | PWR_OFF |   | PWR_OFF |       |       |       |       |        |
//                           |       |       | PWR_ON  |   | PWR_ON  |       |       |
                        bindings = <
   &bt BT_CLR       &bt BT0          &bt BT1          &bt BT2          &bt BT3          &bt BT4            &none              &none   &none   &none     &none     &none 
   &rgb_ug RGB_TOG  &rgb_ug RGB_BRI  &rgb_ug RGB_HUI  &rgb_ug RGB_SAI  &rgb_ug RGB_EFF  &out OUT_TOG       &none    	      &none   &none   &none     &none     &none 
   &none            &rgb_ug RGB_BRD  &rgb_ug RGB_HUD  &rgb_ug RGB_SAD  &rgb_ug RGB_EFR  &ext_power EP_OFF  &ext_power EP_OFF  &none   &none   &none     &none     &none 
                                                      &none            &none            &ext_power EP_ON   &ext_power EP_ON   &none   &none
                        >;
                };
		
				travel_layer {
// -----------------------------------------------------------------------------------------
// |       |       |       |       |       |         |   |         |       |       |       |       |        |
// |       |       |       |       |       |         |   |         |       |       |       |       |        |
// |       |       |       |       |       |         |   |         |       |       |       |       |        |
//                         |       |       |         |   |         |       |       |
                        bindings = <
   &none       &none    &none    &none    &none    &none        &none   &none   &none   &none     &none     &none 
   &none       &none    &none    &none    &none    &none        &none   &none   &none   &none     &none     &none 
   &none       &none    &none    &none    &none    &none     	&none   &none   &none   &none     &none     &none 
                                 &none    &none    &none     	&none   &none   &none
                        >;
                };
        };
};
